using KeyboardHookReceiver.Dto;
using KeyboardHookReceiver.Models;
using Microsoft.AspNetCore.Mvc;
using Npgsql;

namespace KeyboardHookReceiver.Repository;

public class Repository : IRepository
{
    private static readonly NpgsqlConnection _conn = new("Server=localhost;" +
                                                         "Port=5432;" +
                                                         "Database=postgres;" +
                                                         "User Id=postgres;" +
                                                         "Password=postgres");

    public async Task CreateTableByAccountNameAsync(string accountName)
    {
        await _conn.OpenAsync();

        await using var cmd = new NpgsqlCommand { Connection = _conn };

        cmd.CommandText = $"CREATE TABLE IF NOT EXISTS {accountName} " +
                          "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                          "datetime timestamp," +
                          "program varchar," +
                          "keyCode smallint," +
                          "click varchar(30))";

        await cmd.ExecuteNonQueryAsync();

        await _conn.CloseAsync();
    }

    public async Task AddKeyboardActionAsync(KeyboardActionDto log)
    {
        await _conn.OpenAsync();

        await using var cmd = new NpgsqlCommand
        {
            Connection = _conn,
            CommandText = $"INSERT INTO {log.AccountName} (datetime, program, keyCode, click) " +
                          $"VALUES ('{log.DateTime}', '{log.Program}', '{log.KeyCode}', null)"
        };

        await cmd.ExecuteNonQueryAsync();

        await _conn.CloseAsync();
    }

    public async Task AddMouseActionAsync(MouseClickActionDto log)
    {
        await _conn.OpenAsync();

        await using var cmd = new NpgsqlCommand
        {
            Connection = _conn,
            CommandText =
                $"INSERT INTO {log.AccountName} (datetime, program, keyCode, click) " +
                $"VALUES ('{log.DateTime}', '{log.Program}', null, '{log.clickSide}Click [x:{log.X}, y:{log.Y}]')"
        };

        await cmd.ExecuteNonQueryAsync();

        await _conn.CloseAsync();
    }

    public async Task<ICollection<InputAction>> GetActionsAsync(
        string accountName,
        DateTime from,
        DateTime until)
    {
        await _conn.OpenAsync();

        await using var cmd = new NpgsqlCommand
        {
            Connection = _conn,
            CommandText = $"SELECT * " +
                          $"FROM {accountName} a " +
                          $"WHERE a.datetime BETWEEN '{from}' AND '{until}'"
        };

        var actions = new List<InputAction>();
        await using (var reader = await cmd.ExecuteReaderAsync())
        {
            while (await reader.ReadAsync())
            {
                for (var i = 0; i < reader.FieldCount - 1; i += 5)
                {
                    actions.Add(new InputAction
                    {
                        Id = reader.GetInt32(0),
                        DateTime = reader.GetDateTime(i + 1),
                        Program = reader.GetString(i + 2),
                        KeyCode = reader.IsDBNull(i + 3) ? 0 : reader.GetInt16(i + 3),
                        Click = reader.IsDBNull(i + 4) ? null : reader.GetString(i + 4)
                    });
                }
            }
        }

        await _conn.CloseAsync();

        return actions;
    }

    public async Task<ActionResult<IEnumerable<string>>> GetListenedAccountsAsync()
    {
        await _conn.OpenAsync();

        await using var cmd = new NpgsqlCommand
        {
            Connection = _conn,
            CommandText =
                "SELECT table_name " +
                "FROM information_schema.tables " +
                "WHERE table_schema='public' AND table_type='BASE TABLE'"
        };

        var accounts = new List<string>();
        await using (var reader = await cmd.ExecuteReaderAsync())
        {
            while (await reader.ReadAsync())
            {
                for (var i = 0; i < reader.FieldCount; i++)
                {
                    accounts.Add(reader.GetString(i));
                }
            }
        }

        await _conn.CloseAsync();

        return accounts;
    }
}